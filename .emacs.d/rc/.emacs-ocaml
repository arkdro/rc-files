;; vim: ft=lisp
;; Lisp mode

;; for emacs to use opam's things:
;; 1 - PATH="$HOME/util/ocaml/lib/bin:$PATH"
;; 2 - export PATH
;; 3 - eval `~/util/ocaml/lib/bin/opam config env`
;; 4 - start emacs

(load "~/.opam/system/share/emacs/site-lisp/tuareg-site-file")

; offer auto-completion annoyingly
(setq merlin-ac-setup t)

; comint-input-ring (namely 'history') for ocaml doesn't work out of the box.
; It's strange.
(add-hook 'tuareg-interactive-mode-hook
    '(lambda ()
        ; (add-hook HOOK FUNCTION &optional APPEND LOCAL) <- LOCAL=t
        (add-hook 'kill-buffer-hook 'comint-write-input-ring nil t)
        (setq comint-input-ring-file-name "~/.ocaml_emacs_history")
        (setq comint-input-ignoredups t)
        (comint-read-input-ring t)
    ))

; it isn't necessary - everything (except history) works out of the box
;; Ocaml
;;(add-to-list 'load-path "~/.elisp/tuareg-mode")
;;(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
;;(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
;;(autoload 'tuareg-imenu-set-imenu "tuareg-imenu"
;;  "Configuration of imenu for tuareg" t)
;;
;;(add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
;;
;;(setq auto-mode-alist
;;    (append '(("\\.ml[ily]?$" . tuareg-mode)
;;              ("\\.topml$" . tuareg-mode))
;;              auto-mode-alist))

; example of a keys redefining in a mode
;(add-hook 'Tuareg-Interactive
;    (lambda ()
;        (define-key isearch-mode-map (kbd "M-s") 'isearch-repeat-forward)
;        (define-key isearch-mode-map (kbd "M-S") 'isearch-repeat-backward)
;    )
;)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; custom-tuareg.el - Tuareg customization example: Append this file to .emacs.

;; Here is an example of Tuareg variables customization:

(add-hook 'tuareg-mode-hook
      '(lambda ()
         ;; for search:
         (modify-syntax-entry ?_ "w")
         (setq tuareg-lazy-= t)
                    ; indent `=' like a standard keyword
         (setq tuareg-lazy-paren t)
                    ; indent [({ like standard keywords
         ;(setq tuareg-in-indent 0)
         (setq tuareg-let-indent 4)
         ;(setq tuareg-type-indent 0)
                    ; no indentation after `in' keywords
         (auto-fill-mode 1)
                    ; turn on auto-fill minor mode
         (if (featurep 'sym-lock)   ; Sym-Lock customization only
         (setq sym-lock-mouse-face-enabled nil))
                    ; turn off special face under mouse
         ))

;; If you use Sym-Lock, you could also add some customization code after the
;; `(require 'sym-lock)' in your `.emacs'

(if (featurep 'sym-lock)
    (setq tuareg-sym-lock-keywords
      '(("<-" 0 1 172 nil) ("->" 0 1 174 nil)
        ;; (":=" 0 1 220 nil)
        ("<=" 0 1 163 nil) (">=" 0 1 179 nil)
        ("<>" 0 1 185 nil) ("==" 0 1 186 nil)
        ("||" 0 1 218 nil) ("&&" 0 1 217 nil)
        ("[^*]\\(\\*\\ nil)\\." 1 8 180 nil)
        ("\\(/\\ nil)\\." 1 3 184 nil)
        ;; (":>" 0 1 202 nil)
        ;; (";;" 0 1 191 nil)
        ("\\<_\\>" 0 3 188 nil) ("\\<sqrt\\>" 0 3 214 nil)
        ("\\<unit\\>" 0 3 198 nil) ("\\<fun\\>" 0 3 108 nil)
        ("\\<or\\>" 0 3 218 nil) ("\\<not\\>" 0 3 216 nil))))

;; for search:
(modify-syntax-entry ?_ "w")

;; for merlin:
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
 (when (and opam-share (file-directory-p opam-share))
  ;; Register Merlin
  (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
  (autoload 'merlin-mode "merlin" nil t nil)
  ;; Automatically start it in OCaml buffers
  (add-hook 'tuareg-mode-hook 'merlin-mode t)
  (add-hook 'caml-mode-hook 'merlin-mode t)
  ;; Use opam switch to lookup ocamlmerlin binary
  (setq merlin-command 'opam)))

(add-hook 'tuareg-mode-hook
      '(lambda ()
         (global-set-key (kbd "TAB") 'auto-complete) ; for completion on demand
         (define-key tuareg-mode-map (kbd "M-.") 'merlin-locate)
         (define-key tuareg-mode-map (kbd "M-,") 'merlin-pop-stack)
         ))

